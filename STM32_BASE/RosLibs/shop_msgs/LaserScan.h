// Generated by gencpp from file shop_msgs/LaserDistance.msg
// DO NOT EDIT!

#ifndef SHOP_MSGS_MESSAGE_LASERDISTANCE_H
#define SHOP_MSGS_MESSAGE_LASERDISTANCE_H

#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include "ros/msg.h"

namespace shop_msgs
{
  class LaserScan : public ros::Msg
  {
  public:
    typedef float _scan1_ranges_type;
    _scan1_ranges_type scan1_ranges;
    typedef float _scan2_ranges_type;
    _scan1_ranges_type scan2_ranges;
    typedef float _scan3_ranges_type;
    _scan1_ranges_type scan3_ranges;
    typedef float _scan4_ranges_type;
    _scan1_ranges_type scan4_ranges;
    typedef float _scan_time_type;
    _scan_time_type scan_time;

    LaserScan() : scan1_ranges(0.0),
                  scan2_ranges(0.0),
                  scan3_ranges(0.0),
                  scan4_ranges(0.0),
                  scan_time(0.0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      union {
        float real;
        uint32_t base;
      } u_scan1_ranges;
      u_scan1_ranges.real = this->scan1_ranges;
      *(outbuffer + offset + 0) = (u_scan1_ranges.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_scan1_ranges.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_scan1_ranges.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_scan1_ranges.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->scan1_ranges);
      union {
        float real;
        uint32_t base;
      } u_scan2_ranges;
      u_scan2_ranges.real = this->scan2_ranges;
      *(outbuffer + offset + 0) = (u_scan2_ranges.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_scan2_ranges.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_scan2_ranges.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_scan2_ranges.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->scan2_ranges);
      union {
        float real;
        uint32_t base;
      } u_scan3_ranges;
      u_scan3_ranges.real = this->scan3_ranges;
      *(outbuffer + offset + 0) = (u_scan3_ranges.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_scan3_ranges.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_scan3_ranges.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_scan3_ranges.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->scan3_ranges);
      union {
        float real;
        uint32_t base;
      } u_scan4_ranges;
      u_scan4_ranges.real = this->scan4_ranges;
      *(outbuffer + offset + 0) = (u_scan4_ranges.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_scan4_ranges.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_scan4_ranges.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_scan4_ranges.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->scan4_ranges);

      union {
        float real;
        uint32_t base;
      } u_scan_time;
      u_scan_time.real = this->scan_time;
      *(outbuffer + offset + 0) = (u_scan_time.base >> (8 * 0)) & 0xFF;
      *(outbuffer + offset + 1) = (u_scan_time.base >> (8 * 1)) & 0xFF;
      *(outbuffer + offset + 2) = (u_scan_time.base >> (8 * 2)) & 0xFF;
      *(outbuffer + offset + 3) = (u_scan_time.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->scan_time);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      union {
        float real;
        uint32_t base;
      } u_scan1_ranges;
      u_scan1_ranges.base = 0;
      u_scan1_ranges.base |= ((uint32_t)(*(inbuffer + offset + 0))) << (8 * 0);
      u_scan1_ranges.base |= ((uint32_t)(*(inbuffer + offset + 1))) << (8 * 1);
      u_scan1_ranges.base |= ((uint32_t)(*(inbuffer + offset + 2))) << (8 * 2);
      u_scan1_ranges.base |= ((uint32_t)(*(inbuffer + offset + 3))) << (8 * 3);
      this->scan1_ranges = u_scan1_ranges.real;
      offset += sizeof(this->scan1_ranges);
      union {
        float real;
        uint32_t base;
      } u_scan2_ranges;
      u_scan2_ranges.base = 0;
      u_scan2_ranges.base |= ((uint32_t)(*(inbuffer + offset + 0))) << (8 * 0);
      u_scan2_ranges.base |= ((uint32_t)(*(inbuffer + offset + 1))) << (8 * 1);
      u_scan2_ranges.base |= ((uint32_t)(*(inbuffer + offset + 2))) << (8 * 2);
      u_scan2_ranges.base |= ((uint32_t)(*(inbuffer + offset + 3))) << (8 * 3);
      this->scan2_ranges = u_scan2_ranges.real;
      offset += sizeof(this->scan2_ranges);
      union {
        float real;
        uint32_t base;
      } u_scan3_ranges;
      u_scan3_ranges.base = 0;
      u_scan3_ranges.base |= ((uint32_t)(*(inbuffer + offset + 0))) << (8 * 0);
      u_scan3_ranges.base |= ((uint32_t)(*(inbuffer + offset + 1))) << (8 * 1);
      u_scan3_ranges.base |= ((uint32_t)(*(inbuffer + offset + 2))) << (8 * 2);
      u_scan3_ranges.base |= ((uint32_t)(*(inbuffer + offset + 3))) << (8 * 3);
      this->scan3_ranges = u_scan3_ranges.real;
      offset += sizeof(this->scan3_ranges);
      union {
        float real;
        uint32_t base;
      } u_scan4_ranges;
      u_scan4_ranges.base = 0;
      u_scan4_ranges.base |= ((uint32_t)(*(inbuffer + offset + 0))) << (8 * 0);
      u_scan4_ranges.base |= ((uint32_t)(*(inbuffer + offset + 1))) << (8 * 1);
      u_scan4_ranges.base |= ((uint32_t)(*(inbuffer + offset + 2))) << (8 * 2);
      u_scan4_ranges.base |= ((uint32_t)(*(inbuffer + offset + 3))) << (8 * 3);
      this->scan2_ranges = u_scan4_ranges.real;
      offset += sizeof(this->scan4_ranges);
      union {
        float real;
        uint32_t base;
      } u_scan_time;
      u_scan_time.base = 0;
      u_scan_time.base |= ((uint32_t)(*(inbuffer + offset + 0))) << (8 * 0);
      u_scan_time.base |= ((uint32_t)(*(inbuffer + offset + 1))) << (8 * 1);
      u_scan_time.base |= ((uint32_t)(*(inbuffer + offset + 2))) << (8 * 2);
      u_scan_time.base |= ((uint32_t)(*(inbuffer + offset + 3))) << (8 * 3);
      this->scan2_ranges = u_scan_time.real;
      offset += sizeof(this->scan_time);
      return offset;
    }

    const char *getType() { return "shop_msgs/LaserScan"; };
    const char *getMD5() { return "7f6be2f540b5dd406a5e0a9932527631"; };
  };
} // namespace shop_msgs

#endif // SHOP_MSGS_MESSAGE_LASERDISTANCE_H
